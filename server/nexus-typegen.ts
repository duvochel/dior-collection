/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Cart: { // root type
    count: number; // Int!
    id: string; // ID!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
    taxes: string; // String!
    total: string; // String!
  }
  Catalog: { // root type
    count: number; // Int!
    id: string; // ID!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
  }
  Image: { // root type
    desktop: string; // String!
    mini: string; // String!
    mobile: string; // String!
    tablet: string; // String!
  }
  Mutation: {};
  Product: { // root type
    description: string; // String!
    id: string; // ID!
    image?: NexusGenRootTypes['Image'] | null; // Image
    name: string; // String!
    price: number; // Int!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // ID!
    password: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Cart: { // field return type
    count: number; // Int!
    id: string; // ID!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
    taxes: string; // String!
    total: string; // String!
  }
  Catalog: { // field return type
    count: number; // Int!
    id: string; // ID!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
  }
  Image: { // field return type
    desktop: string; // String!
    mini: string; // String!
    mobile: string; // String!
    tablet: string; // String!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Product: { // field return type
    description: string; // String!
    id: string; // ID!
    image: NexusGenRootTypes['Image'] | null; // Image
    name: string; // String!
    price: number; // Int!
  }
  Query: { // field return type
    cart: NexusGenRootTypes['Cart']; // Cart!
    catalog: NexusGenRootTypes['Catalog']; // Catalog!
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    password: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Cart: { // field return type name
    count: 'Int'
    id: 'ID'
    products: 'Product'
    taxes: 'String'
    total: 'String'
  }
  Catalog: { // field return type name
    count: 'Int'
    id: 'ID'
    products: 'Product'
  }
  Image: { // field return type name
    desktop: 'String'
    mini: 'String'
    mobile: 'String'
    tablet: 'String'
  }
  Mutation: { // field return type name
    login: 'AuthPayload'
  }
  Product: { // field return type name
    description: 'String'
    id: 'ID'
    image: 'Image'
    name: 'String'
    price: 'Int'
  }
  Query: { // field return type name
    cart: 'Cart'
    catalog: 'Catalog'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    password: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}